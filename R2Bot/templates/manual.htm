<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Manual Input</title>
    <meta name="description" content="Source code generated using layoutit.com">
    <meta name="author" content="LayoutIt!">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/png" href="favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="favicon-16x16.png" sizes="16x16" />
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"
            integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
            crossorigin="anonymous"></script>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <h3 class="text-center">
                    Manual Input
                </h3>
                <ul class="nav nav-tabs">
                    <li>
                        <a href="main.htm">Home</a>
                    </li>
                    <li class="active">
                        <a href="manual.htm">Manual Input</a>
                    </li>
                    <li>
                        <a href="camera.htm">Camera</a>
                    </li>
                    <li>
                        <a href="database.htm">Database</a>
                    </li>
                    <li class="dropdown pull-right">
                        <a href="#" data-toggle="dropdown" class="dropdown-toggle">Dropdown<strong class="caret"></strong></a>
                        <ul class="dropdown-menu">
                            <li>
                                <a href="#">Action</a>
                            </li>
                            <li>
                                <a href="#">Another action</a>
                            </li>
                            <li>
                                <a href="#">Something else here</a>
                            </li>
                            <li class="divider">
                            </li>
                            <li>
                                <a href="#">Separated link</a>
                            </li>
                        </ul>
                    </li>
                </ul>

                <div class="row">
                    <div class="col-md-12">
                        <h3 class="text-left">
                            Locomotion
                        </h3>
                        <div id="container">
                            <canvas id="canvas" width="700" height="700">
                                This text is displayed if your browser does not support HTML5 Canvas.
                            </canvas>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <h3>
                            Head Rotation
                        </h3>
                        
                        <button type="button" class="btn btn-default">
                            Left
                        </button>
                        <button type="button" class="btn btn-default">
                            Right
                        </button>
                        <button type="button" class="btn btn-default">
                            Stop
                        </button>
                    </div>
                </div>

                <h3> Map</h3>

                <canvas id="main" height="301" width="301 "></canvas>

            </div>

        </div>
    </div>
    <script src="joystick.js"></script>
    <script>
        var sock = new WebSocket("ws://" + location.host + "/wsm");
        sock.binaryType = "arraybuffer";
        sock.onopen = () => {
            console.log('open');

            setInterval(function () {
                sock.send((dataCoordX / rad).toString() + " " + (dataCoordY / rad).toString());
            }, 300);
        }
        sock.onerror = (e) => {
            console.log('error', e)
        }
        sock.onclose = () => {
            console.log('close')
        }
        sock.onmessage = function (e) {
            if (e.data) {
                drawMap(e.data);
                drawBoard();
            }
        }
        function zeros(dimensions) {
            var array = [];

            for (var i = 0; i < dimensions[0]; ++i) {
                array.push(dimensions.length == 1 ? 0 : zeros(dimensions.slice(1)));
            }

            array[15][15] = 1;

            return array;
        }

        var mctx = document.getElementById('main').getContext('2d');

        function drawMap(data) {
            var map = zeros([30, 30]);
          //  console.log(map);
            console.log(map[15][15]);

          var dist =arrayBufferToString(data);

          console.log(dist);

          function arrayBufferToString(buffer) {
              var arr = new Uint8Array(buffer);
              var str = String.fromCharCode.apply(String, arr);
              if (/[\u0080-\uffff]/.test(str)) {
                  throw new Error("this string seems to contain (still encoded) multibytes");
              }
              return str;
          }
          
          //splitting up array of sensor data and creating dictionary of sensor:sensorData
          var n = dist.split("\n");
          console.log(n);
           
          var dict = {};
          for (var i = 0; i < n.length ; i++) {
              var split = n[i].split(',');
           //   var subs = split[0].substring(1);
             // subs = subs.substring(0, subs.length - 1);
              if (parseFloat(split[1]) <= 20.0) {
                  dict[split] = parseFloat(split[1])/2;
              }
              console.log(dict);
          }
          //storing values in sensor and distance 
          for (var key in dict) {
              var sensor = key;
              console.log(sensor);
              var distance = dict[key];
              console.log(getAngle(sensor));
              angle = parseFloat(getAngle(sensor))*Math.PI/180;
              console.log("angle" + angle);
              findEdge(distance, angle, sensor);
          }
          function findEdge(distance, angle,sensor) {
              //R2 position = map[15][15]
              
              var centerAngle = angle;
              console.log("ca" + centerAngle);
              for (var i = 0; i< 4; i++){ //going counterclockwise
                  var xComponent = Math.floor(distance * Math.cos(centerAngle));
                  console.log(distance * Math.cos(centerAngle));
                  var yComponent = Math.floor(distance * Math.sin(centerAngle));
                  console.log("going ccw");
                 // console.log(xComponent);
                  console.log(yComponent);
                  
                  map[15-yComponent][15+xComponent] = getColor(sensor);
                  centerAngle += 5*Math.PI/180;
              }
              
              for (var i = 0; i < 4; i++) { //going clockwise
                  var xComponent = Math.floor(distance *  Math.cos(angle));
                  var yComponent = Math.floor(distance * Math.sin(angle));
                  console.log("going cw");
                  console.log(xComponent);
                  console.log(yComponent);
                  map[15-yComponent][15+xComponent] = getColor(sensor);
                  angle -= 5 * Math.PI / 180;
              }
              //column, row
          }
          function getColor(sensor) {
              var color = 0;
              switch (sensor) {
                  case "U1SENSOR":
                      color = 2;
                      break;
                  case "U2SENSOR":
                      color = 3;
                      break;
                  case "U3SENSOR":
                      color = 4;
                      break;
              }

              return color;
          }
          function getAngle(sensor) {
              var angle = 0;
              switch (sensor) {
                  case "U1SENSOR":
                      angle = 90;
                      break;
                  case "U2SENSOR":
                      angle = 67.5;
                      break;
                  case "U3SENSOR":
                      angle = 112.5;
                      break;
              }
            
              return angle;
          }

            for (var i = 0; i < map.length; i++) {
                for (var j = 0; j < map[i].length; j++) {
                    if (map[i][j] === 1) {
                        mctx.fillStyle = 'Red';
                        mctx.fillRect(j * 10, i * 10, 10, 10);
                      //  map[i][j + dist] = 2;
                    }
                    if (map[i][j] == 2) {
                        mctx.fillStyle = 'Yellow';
                        mctx.fillRect(j * 10, i * 10, 10, 10);
                    }
                    if (map[i][j] == 3) {
                        mctx.fillStyle = 'Cyan';
                        mctx.fillRect(j * 10, i * 10, 10, 10);
                    }
                    if (map[i][j] == 4) {
                        mctx.fillStyle = 'Green';
                        mctx.fillRect(j * 10, i * 10, 10, 10);
                    }

                }
            }
        }

        function drawBoard() {
            for (var x = 0; x <= 301; x += 10) {
                mctx.moveTo(0.5 + x + 0, 0);
                mctx.lineTo(0.5 + x + 0, 300 + 0);
            }


            for (var x = 0; x <= 301; x += 10) {
                mctx.moveTo(0, 0.5 + x + 0);
                mctx.lineTo(300 + 0, 0.5 + x + 0);
            }

            mctx.strokeStyle = "black";
            mctx.stroke();
        }


    </script>
</body>
</html>