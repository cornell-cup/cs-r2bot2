<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/png" href="favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="favicon-16x16.png" sizes="16x16" />
    <title>Tools and Users Databases</title>

    <meta name="description" content="Source code generated using layoutit.com">
    <meta name="author" content="LayoutIt!">
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
      <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
      <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
  </head>
  <body>

    <div class="container-fluid">
	<div class="row">
		<div class="col-md-12">
            <h3 class="text-center">
                Tools and Users Databases
            </h3>
            <ul class="nav nav-tabs">
                <li>
                    <a href="main.htm">Home</a>
                </li>
                <li>
                    <a href="manual.htm">Manual Input</a>
                </li>
                <li>
                    <a href="camera.htm">Camera</a>
                </li>
                <li class="active">
                    <a href="database.htm">Database</a>
                </li>
            </ul>
            <br />
            <p>Drawer State</p>
            <input id="drawerState" type="text" disabled />
            <p>RIFD</p>
            <input id="RFIDID" type="text" disabled />
			<div id="toolsDatabase"></div>
            <div id="usersDatabase"></div>
		</div>
	</div>
        <script>
            var sock = new WebSocket("ws://" + location.host + "/wsd");
            var cols = [];
            var rows = [];
            var dict = {};
            sock.binaryType = "arraybuffer";
            sock.onopen = () => {
                console.log('open');

                setInterval(function () {
                    sock.send("");
                }, 1000);
            }
            sock.onerror = (e) => {
                console.log('error', e)
            }
            sock.onclose = () => {
                console.log('close')
            }

            sock.onmessage = function (e) {
                if (e.data) {
                    rows = arrayBufferToString(e.data);
                    identifier = rows.substring(0, 1);
                    text = rows.substring(1);
                    if (identifier == "T" || identifier == "U") {
                        rows = [];
                        cols = [];
                        dict = {};
                        rows = rows.substring(1, rows.length - 1).split("@");
                        for (var i = 0; i < rows.length; i++) {
                            col = rows[i].split("|");
                            for (var j = 0; j < col.length; j++) {
                                cols.push(col[j])
                            }
                        }
                        for (var i = 0; i < cols.length; i++) {
                            dict = insertIntoDic(dict, cols[i].split(",")[0], cols[i].split(",")[1]);
                        }
                    }


                    function insertIntoDic(dictionary, key, value) {
                        // If key is not initialized or some bad structure
                        if (!dictionary[key] || !(dictionary[key] instanceof Array)) {
                            dictionary[key] = [];
                        }
                        // All arguments, exept first push as valuses to the dictonary
                        dictionary[key] = dictionary[key].concat(Array.prototype.slice.call(arguments, 2));
                        return dictionary;
                    }

                    function arrayBufferToString(buffer) {
                        var arr = new Uint8Array(buffer);
                        var str = String.fromCharCode.apply(String, arr);
                        if (/[\u0080-\uffff]/.test(str)) {
                            throw new Error("this string seems to contain (still encoded) multibytes");
                        }
                        return str;
                    }

                    var html = "";
                    html += "<div class='panel panel-default'>";
                    html += "<div class='panel-heading'>";
                    html += "<h3 class='panel-title'>";
                    if (identifier == "T") {
                        html += "<span>Tools Database</span>";
                    }
                    else if (identifier == "U") {
                        html += "<span>Users Database</span>";
                    }
                    html += "</h3>";
                    html += "</div>";
                    html += "<div class='panel-body'>";
                    html += "<table class='table table-default table-striped'>";
                    html += "<thead class='inverse'><tr>";
                    for (var key in dict) {
                        html += "<td>" + key + "</td>";
                    }
                    html += "</tr></thead>";
                    for (var i = 0; i < rows.length; i++) {
                        html += "<tr>";
                        for (var key in dict) {
                            html += "<td>" + dict[key][i] + "</td>";
                        }
                        html += "</tr>";
                    }
                    html += "</table>";
                    html += "</div>";
                    html += "</div>";
                    if (identifier == "T") {
                        $("#toolsDatabase").html(html);
                    }
                    else if (identifier == "U") {
                        $("#usersDatabase").html(html);
                    }
                }

                /* 
                    0: HEAD manual input angle
                    1: HEAD get angle
                    2: DRAWERS state
                    3: DRAWERS RFID ID
                    4: HEAD manual flap state where 0 is OFF and 1 is ON
                */

                else if (identifier == "2") {
                    if (text == "C" || text == "T") {
                        $("#drawerState").val("Drawers: Closed\n");
                    }
                    else if (text == "O") {
                        $("#drawerState").val("Drawers: Open\n");
                    }
                }

                else if (identifier == "3") {
                    $("#RFIDID").val(text + "\n");
                }
            }

        </script>
        <style>
            .inverse {
                background-color: #212121;
                color: white;
            }
        </style>
</div>
  </body>
</html>